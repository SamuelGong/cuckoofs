/* Copyright (c) 2025 Huawei Technologies Co., Ltd.
 * SPDX-License-Identifier: MulanPSL-2.0
 */

#pragma once

#include <atomic>
#include <memory>
#include <shared_mutex>

#include "read_stream/read_stream.h"
#include "write_stream/stream_assembler.h"

struct OpenInstance
{
    OpenInstance() = default;

    ~OpenInstance() = default;
    void LockOpenInstance();
    void UnlockOpenInstance();

    // pseudo fd generated by cuckoo
    uint64_t fd = UINT64_MAX;
    // inodeid of the file
    uint64_t inodeId;
    // offset + size of last serial read
    off_t serialReadEnd = 0;
    // current size of file, max of original size & end of file
    //  uint64_t currentSize = 0;
    std::atomic<uint64_t> currentSize = 0;
    // size of file before this operation
    uint64_t originalSize = 0;
    // fd in ext4 or cuckoofd of file on remote
    uint64_t physicalFd = UINT64_MAX;
    // oflags (such as O_RDONLY).
    int oflags = 0;
    // nodeid of files
    int nodeId = -1;
    // unused
    int backupNodeId = -1;
    // whether nodeid is changed
    bool nodeFail = false;
    // times to call cuckoowrite
    std::atomic<int> writeCnt = 0;
    // whether write fail
    std::atomic<bool> writeFail = false;
    // whether read fail
    std::atomic<bool> readFail = false;
    // mark is call from server
    bool isRemoteCall = false;
    // mark call to remote fail, allow to be non atomic
    std::atomic<bool> remoteFailed = false;
    // is flush called
    bool isFlushed = false;
    // is closed called for rpc server
    std::atomic<bool> isClosed = false;
    std::shared_mutex closeMutex;

    // used to store content of small file to read
    std::shared_ptr<char> readBuffer = nullptr;
    int readBufferSize = 0;
    std::atomic<bool> preReadStarted{false};
    std::atomic<bool> preReadStopped{false};
    std::atomic<bool> directReadFile{false};
    // path from fuse to obs
    std::string path;
    // mutex to protect member in class
    std::shared_mutex fileMutex;
    // openfile called to open physical file
    std::atomic<bool> isOpened{false};
    // buffer to aggregate write data
    WriteStream writeStream;
    // buffer to store pre-fetched data. Must be LAST to be DESTRUCTED FIRST
    ReadStream readStream;
};
